From 19e9da9cdc76f69076c0212dcd6208e05ea71d7a Mon Sep 17 00:00:00 2001
From: Dianna Hohensee <dianna.hohensee@10gen.com>
Date: Tue, 18 Sep 2018 11:30:49 -0400
Subject: [PATCH] SERVER-36951 a createIndexes operation inside applyOps is not
 required to have a UUID.

(cherry picked from commit 0d0ba866052fd2b9ceaaa66c2b725a02822b102d)

Bug: https://jira.mongodb.org/browse/SERVER-36951
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/mongodb/+bug/1821391
Origin: https://github.com/mongodb/mongo/commit/19e9da9cdc76f69076c0212dcd6208e05ea71d7a
Last-Update: 2019-03-22

---
 jstests/replsets/apply_ops_create_indexes.js | 46 +++++++++++++++-----
 src/mongo/db/repl/oplog.cpp                  |  2 +-
 2 files changed, 37 insertions(+), 11 deletions(-)

diff --git a/jstests/replsets/apply_ops_create_indexes.js b/jstests/replsets/apply_ops_create_indexes.js
index 4fe813b5ed4..1aba4e710b9 100644
--- a/jstests/replsets/apply_ops_create_indexes.js
+++ b/jstests/replsets/apply_ops_create_indexes.js
@@ -1,6 +1,6 @@
-/* This test ensures that indexes created by running applyOps are successfully replicated (see
- * SERVER-31435). Both insertion into system.indexes and createIndexes style oplog entries are
- * passed to applyOps here.
+/**
+ * This test ensures that indexes created by running applyOps are both successful and replicated
+ * correctly (see SERVER-31435).
  */
 (function() {
     "use strict";
@@ -9,8 +9,18 @@
         let res = testDB.runCommand(cmd);
         assert.commandWorked(res, "could not run " + tojson(cmd));
         let indexes = new DBCommandCursor(testDB, res).toArray();
+
         assert.eq(indexes.length, expectedNumIndexes);
-        assert.eq(indexes[expectedNumIndexes - 1].name, indexName);
+
+        let foundIndex = false;
+        for (let i = 0; i < indexes.length; ++i) {
+            if (indexes[i].name == indexName) {
+                foundIndex = true;
+            }
+        }
+        assert(foundIndex,
+               "did not find the index '" + indexName + "' amongst the collection indexes: " +
+                   tojson(indexes));
     };
 
     let ensureOplogEntryExists = function(localDB, indexName) {
@@ -46,28 +56,44 @@
     // Create an index via the applyOps command with the createIndexes command format and make sure
     // it exists.
     let uuid = primaryTestDB.getCollectionInfos()[0].info.uuid;
-    let cmdFormatIndexName = "a_1";
+    let cmdFormatIndexNameA = "a_1";
     cmd = {
         applyOps: [{
             op: "c",
             ns: dbName + "." + collName,
             ui: uuid,
-            o: {createIndexes: collName, v: 2, key: {a: 1}, name: cmdFormatIndexName}
+            o: {createIndexes: collName, v: 2, key: {a: 1}, name: cmdFormatIndexNameA}
+        }]
+    };
+    res = primaryTestDB.runCommand(cmd);
+    assert.commandWorked(res, "could not run " + tojson(cmd));
+    rst.awaitReplication();
+    ensureIndexExists(primaryTestDB, collName, cmdFormatIndexNameA, 2);
+
+    // Same as directly above, but ensure that applyOps createIndexes can work without a uuid.
+    let cmdFormatIndexNameB = "b_1";
+    cmd = {
+        applyOps: [{
+            op: "c",
+            ns: dbName + "." + collName,
+            o: {createIndexes: collName, v: 2, key: {b: 1}, name: cmdFormatIndexNameB}
         }]
     };
     res = primaryTestDB.runCommand(cmd);
     assert.commandWorked(res, "could not run " + tojson(cmd));
     rst.awaitReplication();
-    ensureIndexExists(primaryTestDB, collName, cmdFormatIndexName, 2);
+    ensureIndexExists(primaryTestDB, collName, cmdFormatIndexNameB, 3);
 
     let localDB = rst.getPrimary().getDB("local");
-    ensureOplogEntryExists(localDB, cmdFormatIndexName);
+    ensureOplogEntryExists(localDB, cmdFormatIndexNameA);
+    ensureOplogEntryExists(localDB, cmdFormatIndexNameB);
 
-    // Make sure the index was replicated to the secondaries.
+    // Make sure the indexes were replicated to the secondaries.
     let secondaries = rst.getSecondaries();
     for (let j = 0; j < secondaries.length; j++) {
         let secondaryTestDB = secondaries[j].getDB(dbName);
-        ensureIndexExists(secondaryTestDB, collName, cmdFormatIndexName, 2);
+        ensureIndexExists(secondaryTestDB, collName, cmdFormatIndexNameA, 3);
+        ensureIndexExists(secondaryTestDB, collName, cmdFormatIndexNameB, 3);
     }
 
     // Create an index by inserting into system.indexes in applyOps.
diff --git a/src/mongo/db/repl/oplog.cpp b/src/mongo/db/repl/oplog.cpp
index db55e1560e4..076d8253059 100644
--- a/src/mongo/db/repl/oplog.cpp
+++ b/src/mongo/db/repl/oplog.cpp
@@ -789,7 +789,7 @@ std::map<std::string, ApplyOpMetadata> opsMap = {
          BSONObj& cmd,
          const OpTime& opTime,
          OplogApplication::Mode mode) -> Status {
-          const NamespaceString nss(parseUUID(opCtx, ui));
+          const NamespaceString nss(parseUUIDorNs(opCtx, ns, ui, cmd));
           BSONElement first = cmd.firstElement();
           invariant(first.fieldNameStringData() == "createIndexes");
           uassert(ErrorCodes::InvalidNamespace,
